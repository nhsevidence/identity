// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using IdentityContext = NICE.Identity.Authorisation.WebAPI.Repositories.IdentityContext;

namespace NICE.Identity.Authorisation.WebAPI.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.Environments", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnvironmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("EnvironmentId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("WebsiteId")
                        .HasColumnName("WebsiteID");

                    b.HasKey("RoleId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.Services", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServiceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.UserRoles", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserRoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptedTerms");

                    b.Property<bool>("AllowContactMe");

                    b.Property<string>("Auth0UserId")
                        .IsRequired()
                        .HasColumnName("Auth0UserID")
                        .HasMaxLength(100);

                    b.Property<string>("DsactiveDirectoryUsername")
                        .HasColumnName("DSActiveDirectoryUsername")
                        .HasMaxLength(100);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(320);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<bool>("HasVerifiedEmailAddress");

                    b.Property<DateTime?>("InitialRegistrationDate");

                    b.Property<bool>("IsLockedOut");

                    b.Property<bool>("IsStaffMember");

                    b.Property<DateTime?>("LastLoggedInDate");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<Guid?>("NiceaccountsId")
                        .HasColumnName("NICEAccountsID");

                    b.Property<string>("NiceactiveDirectoryUsername")
                        .HasColumnName("NICEActiveDirectoryUsername")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.Websites", b =>
                {
                    b.Property<int>("WebsiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WebsiteID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnvironmentId")
                        .HasColumnName("EnvironmentID");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("ServiceId")
                        .HasColumnName("ServiceID");

                    b.HasKey("WebsiteId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.Roles", b =>
                {
                    b.HasOne("NICE.Identity.Authorisation.WebAPI.Models.Websites", "Website")
                        .WithMany("Roles")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_Roles_Roles");
                });

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.UserRoles", b =>
                {
                    b.HasOne("NICE.Identity.Authorisation.WebAPI.Models.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("NICE.Identity.Authorisation.WebAPI.Models.Users", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_Users");
                });

            modelBuilder.Entity("NICE.Identity.Authorisation.WebAPI.Models.Websites", b =>
                {
                    b.HasOne("NICE.Identity.Authorisation.WebAPI.Models.Environments", "Environment")
                        .WithMany("Websites")
                        .HasForeignKey("EnvironmentId")
                        .HasConstraintName("FK_ServiceInstance_Environments");

                    b.HasOne("NICE.Identity.Authorisation.WebAPI.Models.Services", "Service")
                        .WithMany("Websites")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ServiceInstance_Services");
                });
#pragma warning restore 612, 618
        }
    }
}
